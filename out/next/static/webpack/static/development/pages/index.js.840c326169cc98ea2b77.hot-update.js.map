{"version":3,"file":"static/webpack/static/development/pages/index.js.840c326169cc98ea2b77.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Hexagon from 'react-hexagon';\nimport { Box, Column } from 'gestalt';\nimport 'gestalt/dist/gestalt.css';\nimport './index.css';\n\nclass Index extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      size: 5,\n      strokeWidth: 21,\n      chooseEl: [],\n      arrayEl: [],\n      currentPlayer: \"#0080ff\",\n      winner: null\n    }\n  }\n\n  choose(i, j) {\n    if(i!== 0 && j !== 0 && i !== 12 && j !== 12)\n      this.setState({\n        chooseEl: [i, j]\n      })\n  }\n\n  play(i, j) {\n    if(i!== 0 && j !== 0 && i !== 12 && j !== 12 && !(this.state.arrayEl[i] && this.state.arrayEl[i][j])){\n      this.setState(prev => {\n        if(!prev.arrayEl[i]) prev.arrayEl[i] = [];\n        prev.arrayEl[i][j] = prev.currentPlayer;\n\n        \n        return {\n          arrayEl: prev.arrayEl,\n          currentPlayer: prev.currentPlayer === \"#0080ff\" ? \"#e50000\":\"#0080ff\"\n        }\n      })\n\n    }\n  }\n\n  row = (j) => {\n    let row = [];\n    for(let i = 0; i <= 12; i ++) {\n      if(!((i == 0 && j == 0) || (i == 12 && j == 12) || (i == 0 && j == 12) || (i == 12 && j == 0)))\n        row.push(\n          <Hexagon\n            style={{\n              stroke: (i == 0 || i == 12) ? \"#e50000\" : (j == 0 || j == 12) ? \"#0080ff\" : '#ffffff', \n              strokeWidth: this.state.strokeWidth,\n              fill: \n                (this.state.arrayEl[i] && this.state.arrayEl[i][j])? this.state.arrayEl[i][j] : (i == this.state.chooseEl[0] && j == this.state.chooseEl[1]) ? 'rgba(255, 255, 255, .8)' : ((j == 0 || j == 12) || (i == 0 || i == 12)) ? \"transparent\" : 'rgba(255, 255, 100, .15)'\n            }}\n            key={\"tile\" + i + j}\n            onClick={e => {this.play(i, j)}}\n            hexProps={{\n              onMouseLeave: e => {e.type === \"mouseenter\" ? this.choose(i, j) : {}},\n              onMouseEnter: e => {e.type === \"mouseenter\" ? this.choose(i, j) : {}},\n            }}\n          >\n            {\n              !(i!== 0 && j !== 0 && i !== 12 && j !== 12) ?\n              <text x=\"41%\" y=\"60%\">{(i == 0) ? j : (j == 12) ? String.fromCharCode(i + 64): \"\"}</text> : <text></text>\n            }\n          </Hexagon>\n        )\n      else row.push(<Box width={this.state.size + \"%\"} key={\"tile\" + i + j}></Box>)\n    }\n    return row\n  }\n\n  table = () => {\n    let table = [];\n    for(let i = 0; i <= 12; i ++) {\n      table.push(\n        <Box \n          display=\"flex\" \n          direction=\"row\" \n          dangerouslySetInlineStyle={{__style:{\n            width: \"100%\", \n            marginLeft: i*(this.state.size/2) + \"%\", // true\n            marginTop: i !== 0 ? \"-\" + ((this.state.size)/(2*Math.sqrt(3)) + 0.01) +\"%\" : \"0\", \n          }}} \n          key={\"row\" + i}>\n          {\n            this.row(i)\n          }\n        </Box>\n      )\n    }\n    return table\n  }\n\n  render() {\n    return (\n    <Box width=\"100%\" height=\"100vh\" display=\"flex\">\n      <Column span={9}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" alignContent=\"center\" height=\"100vh\" color=\"transparentDarkGray\">\n          <Box \n          position=\"relative\"\n          dangerouslySetInlineStyle={{__style:{\n            left: \"2.5%\",\n          }}} >\n            { this.table() }\n          </Box>\n        </Box>\n      </Column>\n      <Column span={3}>\n      </Column>\n    </Box>)\n  }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoCA;AACA;AAFA;AAGA;AAGA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBA;AACA;AACA;AAAA;AAwBA;AACA;AAAA;AACA;AACA;AAhEA;AAkEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAHA;AAAA;AAKA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AACA;AACA;AApFA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AACA;AAEA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAsDA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAzGA;AACA;AA2GA;;;;A","sourceRoot":""}